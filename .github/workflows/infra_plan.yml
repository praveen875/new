### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "Terraform Plan Workflow"
on:
  push:
   branches:
     - "dev"
      

jobs:
  build-plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        
      - name: Find Modified Files in PR
        timeout-minutes: 1
        run: |
         REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}'); OWNER=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $1}');  HAS_NEXT_PAGE=true; AFTER_CURSOR=""; MODIFIED_TFENV_DIR=""; MODIFIED_TFSCRIPTS=""
         echo $GITHUB_REPOSITORY
         echo $REPO_NAME
         echo $OWNER
        
         while [ $HAS_NEXT_PAGE != "false" ]; do
          GRAPHQL_RESPONSE=$(
            curl -s --location --request POST 'https://api.github.com/graphql' \
            --header 'Authorization: token ${{ secrets.GIT_TOKEN }}' \
            --header 'Accept: application/vnd.github.v4.idl' \
            --header 'Content-Type: application/json' 
          )
          echo $GRAPHQL_RESPONSE
          MODIFIED_TFENV_DIR+=$(echo $GRAPHQL_RESPONSE | jq --raw-output '.data.repository.pullRequest.files.nodes[].path' | { grep tfEnv || true; } | awk -F/ '{print $2}' | sort -u); MODIFIED_TFENV_DIR+=" "
          MODIFIED_TFSCRIPTS+=$(echo $GRAPHQL_RESPONSE | jq --raw-output '.data.repository.pullRequest.files.nodes[].path' | { grep tfScripts || true; } | awk -F/ '{print $2}' | sort -u); MODIFIED_TFSCRIPTS+=" "
          HAS_NEXT_PAGE=$(echo $GRAPHQL_RESPONSE | jq --raw-output '.data.repository.pullRequest.files.pageInfo.hasNextPage')
          AFTER_CURSOR=$(echo $GRAPHQL_RESPONSE | jq --raw-output '.data.repository.pullRequest.files.pageInfo.endCursor')
         done

         if [ -n "$(echo "$MODIFIED_TFSCRIPTS" | tr -d '[:space:]')" ]; then
          ACCOUNTS=$(cd ${GITHUB_WORKSPACE}/tfEnv/; ls -N | sed 's/\///')
         else
          ACCOUNTS=$MODIFIED_TFENV_DIR
         fi

         echo "[+] Accounts to be modified: ${ACCOUNTS}"

         echo "ACCOUNT_DIRS<<EOF" >> $GITHUB_ENV
         echo "${ACCOUNTS}" >> $GITHUB_ENV
         echo "EOF" >> $GITHUB_ENV
   


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize Terraform
        run: |
          cd terraform/${{ matrix.path }}
          terraform init -input=false
      
      - name: Terraform Validate
        id: validate
        run: |
          cd terraform/${{ matrix.path }}
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/${{ matrix.path }}
          echo "+Current Directory"
          pwd
          ls -l
          terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
